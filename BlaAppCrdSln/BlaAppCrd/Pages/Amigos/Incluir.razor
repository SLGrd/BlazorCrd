@page "/Incluir"

@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Collections.Generic;
@using System.Text;
@using System.Text.Json.Serialization;
@using Newtonsoft.Json;

@using CommonCrd.Models;
@using CommonCrd.DataServices;
@using static CommonCrd.Code.GLB;

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons

<h3>Incluir Novo Registro</h3>

@*https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-5.0*@

<div class="container-fluid m-0 p-0">
    <div class="row vh-100 align-items-center">
        @*// Centraliza na vertical  - Bootstrap 5.0 beta*@
        <div class="col-12 d-flex justify-content-center">
            @*// Centraliza na horizontal  - Bootstrap 5.0 beta*@
            <EditForm Model="@Amg" OnValidSubmit="@SaveAmigo">
                <DataAnnotationsValidator />
                <SfCard class="BordaRelevo p-4 m-0">
                    <CardHeader>
                        <h2 class="text-center mb-3" style="color:darkblue;font-size:22px">Amigo</h2>
                    </CardHeader>
                    <CardContent>
                        <div class="row" style="border-top:solid 1px">
                            <div class="col-12 d-flex flex-column">
                                <label style="font-size:12px;margin-bottom:0;margin-top:22px">Nome</label>
                                <SfTextBox class="sfText" style="" CssClass="" Placeholder="" Type="InputType.Text" @bind-Value="@Amg.Nome"></SfTextBox>
                                <ValidationMessage style="font-size:11px;color:red" For="@(() => Amg.Nome)" />
                            </div>
                            <div class="col-12 d-flex flex-column">
                                <label style="font-size:12px;margin-bottom:0;margin-top:6px;">Address</label>
                                <SfTextBox class="sfText" CssClass="" Placeholder="" Type="InputType.Text" @bind-Value=@Amg.Address></SfTextBox>
                                <ValidationMessage style="font-size:11px;color:red" For="@(() => Amg.Address)" />
                            </div>
                            <div class="col-12 d-flex flex-column">
                                <label style="font-size:12px;margin-bottom:0;margin-top:6px;">Email</label>
                                <SfTextBox class="sfText" CssClass="" Placeholder="" Type="InputType.Email" @bind-Value=@Amg.Email></SfTextBox>
                                <ValidationMessage style="font-size:11px;color:red" For="@(() => Amg.Email)" />
                            </div>
                            <div class="col-12 d-flex flex-column">
                                <label style="font-size:12px;margin-bottom:0;margin-top:6px;">Phone</label>
                                <SfTextBox class="sfText" CssClass="" Placeholder="" Type="InputType.Text" @bind-Value=@Amg.Phone></SfTextBox>
                                <ValidationMessage style="font-size:11px;color:red" For="@(() => Amg.Phone)" />
                            </div>
                        </div>
                    </CardContent>
                    <CardFooter>
                        <div class="row flex-column  mt-5 mb-3">
                            @if (Msg.Length > 0)
                            {<div class="col">
                                    <p class="" style="color:darkblue;font-size:13px">@Msg</p>
                                </div>
                            }
                            <div class="col mt-0">
                                <SfButton class="btn-block btn" style="background-color: dodgerblue" type="Submit" @onclick="@SaveAmigoApi"> Save </SfButton>
                            </div>
                            <div class="col mt-3">
                                <SfButton class="btn-block btn" style="background-color: #ffff80;" @onclick="@Cancel"> Cancel </SfButton>
                            </div>
                        </div>
                    </CardFooter>
                </SfCard>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .BordaRelevo {
        max-width: 400px;
        padding: 34px;
        background-color: gainsboro;
        box-shadow: 5px 10px 18px #888888;
        border-radius: 9px;
        border-color: black;
        border-style: double;
    }

    .sfText {
        font-size: 18px;
        width: 100%;
        color: darkblue;
        border-width: 0px 0px 1px 0px;
        background-color: gainsboro;
    }

    .btn {
        border: solid 1px;
        font-size: 18px;
        border-radius: 5px;
    }
</style>

@code {
    private AmigosMd Amg = new AmigosMd();
    private string Msg = string.Empty;

    private void SaveAmigo()
    {
        try
        {
            AmigosDal Am = new AmigosDal();
            CodeMsg cm = Am.Incluir(Amg);
            if (cm.ErrCode == 0)
            { Msg = ""; Amg = new AmigosMd(); }     //  Gravou, limpa a tela
            else
            { Msg = cm.ErrMsg; }                    //  Erro monitorado pelo programa
        }
        catch (Exception ex)
        {
            Msg = "Erro de gravação : " + ex.Message;   //  Erro nao esperado. queda de internet, etc
        }
    }

    private async void SaveAmigoApi()
    {
        try
        {
            // Send the POST Request to the Authentication Server
            string json = await Task.Run(() => JsonConvert.SerializeObject(Amg));
            var httpContent = new StringContent(json, Encoding.UTF8, "application/json");

            using (var h = new HttpClient())
            {
                //  Define o modo de recebimento dos dados (JSON) . Poderia ser XML por ex;
                h.DefaultRequestHeaders.Accept.Clear();
                h.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //  Informa o endereço base (parte fixa) da API
                h.BaseAddress = new Uri(BaseAddress);
                // Error here
                var httpResponse = await h.PostAsync( h.BaseAddress, httpContent);
                if (httpResponse.Content != null)
                {
                    // Error Here
                    Msg = await httpResponse.Content.ReadAsStringAsync();
                    this.StateHasChanged();
                }
            }
        } catch (Exception ex) { throw ex; }
    }

    private void Cancel()
    {
        //  Clear screeen
        Msg = ""; Amg = new AmigosMd();
    }
}